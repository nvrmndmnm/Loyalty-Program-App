import requests
from telegram import Bot
from telegram import Update
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler, Filters
from telegram.ext import CallbackContext
from uplink import Consumer, returns, get, post, Body, json
from buttons import get_register_keyboard, get_base_reply_keyboard
from pathlib import Path
import qrcode
import os
# from dotenv import load_dotenv
# load_dotenv()


BASE_DIR = Path(__file__).resolve().parent.parent
TG_TOKEN = os.getenv('TG_TOKEN')
SITE = os.getenv('TG_SITE')


def start(update: Update, context: CallbackContext):
    update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.',
                              reply_markup=get_register_keyboard())


def about(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏')


def help(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='–ü–æ–º–æ—â—å')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def branches(update: Update, context: CallbackContext):
    branches = ''
    for i in loyaltyAPI.get_request('branches'):
        branches += f'–ù–∞–∑–≤–∞–Ω–∏–µ {i["name"]}\n' \
                    f'A–¥—Ä–µ—Å: {i["address"]}\n' \
                    f'{i["description"]}\n\n'
    context.bot.send_message(chat_id=update.effective_chat.id, text=branches, )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
def news(update: Update, context: CallbackContext):
    response = loyaltyAPI.get_request('articles')
    news_reply_message = '–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!'
    if response:
        articles = ''
        for i in response:
            articles += f'{i["time_created"][:10]}\n' \
                        f'{i["title"]}\n' \
                        f'{i["text"]}\n\n'
            news_reply_message = articles
    context.bot.send_message(chat_id=update.effective_chat.id, text=news_reply_message, )


def rewards(update: Update, context: CallbackContext):
    response = loyaltyAPI.get_request(f'users/{update.effective_user.id}/progress')
    user_rewards_reply = ""
    # if not str(response.status_code).startswith('2'):
    #     user_rewards_reply = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å–Ω–æ–≤–∞.'
    if response.get('program'):
        for i in range(int(response['program'])):
            if i < int(response['completed_orders']):
                user_rewards_reply += '‚ù§Ô∏è‚Äçüî• '
            else:
                user_rewards_reply += "ü§ç "
        user_rewards_reply += f"\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã: " \
                              f"{int(response['program']) - int(response['completed_orders'])}.\n\n" \
                              f"–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–≥—Ä–∞–¥: {response['active_rewards']}."
    else:
        user_rewards_reply = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.'
    context.bot.send_message(chat_id=update.effective_chat.id, text=user_rewards_reply, )


def register(update: Update, context: CallbackContext):
    if update.message.contact.user_id == update.message.chat_id:
        data = {'phone': update.message.contact.phone_number.replace('+', ''),
                'tg_id': update.message.contact.user_id,
                'first_name': update.message.contact.first_name,
                'last_name': update.message.contact.last_name}
        response = loyaltyAPI.post_request("users/create", **data)
        qr_result = generate_qr(update, update.message.contact)
        if not qr_result:
            reply_text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
        else:
            if str(response.status_code).startswith('2'):
                reply_text = '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.'
            else:
                reply_text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'
    else:
        reply_text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.'
    context.bot.send_message(chat_id=update.effective_chat.id, text=reply_text, reply_markup=get_base_reply_keyboard())


def generate_qr(update, contact):
    phone_number = contact.phone_number.replace('+', '')
    # img = qrcode.make(phone_number) # –∑–∞–ø–∏—Å–∞—Ç—å –≤ QR-–∫–æ–¥ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    img = qrcode.make(f'{SITE}ru/s/?id={phone_number}')
    try:
        filename = f'{BASE_DIR}/bot/media/qr/{update.message.chat_id}.png'
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        img.save(filename)
    except Exception as e:
        print(e)
        return False
    return True


def display_qr(update, context):
    try:
        with open(f'{BASE_DIR}/bot/media/qr/{update.message.chat_id}.png', 'rb') as qr_png:
            context.bot.sendPhoto(chat_id=update.message.chat_id, photo=qr_png,
                                  caption='–ü–æ–∫–∞–∂–∏—Ç–µ –≤–∞—à QR-–∫–æ–¥ –∫–∞—Å—Å–∏—Ä—É.')
    except IOError:
        reply_text = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å QR-–∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start'
        context.bot.send_message(chat_id=update.effective_chat.id, text=reply_text)


def main():
    bot = Bot(
        token=TG_TOKEN,
    )
    updater = Updater(TG_TOKEN, use_context=True)
    updater.dispatcher.add_handler(CommandHandler('start', start))

    about_handler = CommandHandler('about', about)
    updater.dispatcher.add_handler(about_handler)

    help_handler = CommandHandler('help', help)
    updater.dispatcher.add_handler(help_handler)

    branches_handler = MessageHandler(Filters.regex('–ó–∞–≤–µ–¥–µ–Ω–∏—è'), branches)
    updater.dispatcher.add_handler(branches_handler)

    news_handler = MessageHandler(Filters.regex('–ù–æ–≤–æ—Å—Ç–∏'), news)
    updater.dispatcher.add_handler(news_handler)

    rewards_handler = MessageHandler(Filters.regex('–ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã'), rewards)
    updater.dispatcher.add_handler(rewards_handler)

    qr_handler = MessageHandler(Filters.regex('QR –∫–æ–¥'), display_qr)
    updater.dispatcher.add_handler(qr_handler)

    register_handler = MessageHandler(Filters.contact & (~Filters.command), register)
    updater.dispatcher.add_handler(register_handler)

    updater.start_polling()
    updater.idle()


class LoyaltyApi(Consumer):
    @returns.json
    @get("{path}/")
    def get_request(self, path):
        print(path)
        pass

    @post("{path}/")
    def post_request(self, path, **body: Body):
        pass


loyaltyAPI = LoyaltyApi(base_url=f"{SITE}api/")

if __name__ == '__main__':
    main()
