from telegram import Bot, InlineKeyboardButton
from telegram import Update
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler, Filters
from telegram.ext import CallbackContext
from uplink import Consumer, returns, get
from .buttons import get_register_keyboard, get_base_reply_keyboard
from .config import TG_TOKEN
import requests
import qrcode


def start(update: Update, context: CallbackContext):
    update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.',
                              reply_markup=get_register_keyboard())


def about(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏')


def help(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='–ü–æ–º–æ—â—å')


def sendRequest():
    response = requests.get('http://localhost:8002/api/branches/').json()
    return response


# –û–±—Ä–æ–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def establishments(update: Update, context: CallbackContext):
    branches = ''
    for i in loyaltyapi.get_repos('branches'):
        branches += f'–ù–∞–∑–≤–∞–Ω–∏–µ {i["name"]}\n' \
                    f'A–¥—Ä–µ—Å: {i["address"]}\n' \
                    f'{i["description"]}\n\n'
    context.bot.send_message(chat_id=update.effective_chat.id, text=branches, )


# –æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
def news(update: Update, context: CallbackContext):
    articles = ''
    for i in loyaltyapi.get_repos('articles'):
        articles += f'{i["time_created"][:10]}\n' \
                    f'{i["title"]}\n' \
                    f'{i["text"]}\n\n'
    context.bot.send_message(chat_id=update.effective_chat.id, text=articles, )


def awards(update: Update, context: CallbackContext):
    response = loyaltyapi.get_repos(f'users/{update.effective_user.id}/progress')
    user_rewards_reply = ""
    for i in range(int(response['program'])):
        if i < int(response['completed_orders']):
            user_rewards_reply += '‚ù§Ô∏è‚Äçüî• '
        else:
            user_rewards_reply += "ü§ç "
    user_rewards_reply += f"\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã: " \
                          f"{int(response['program']) - int(response['completed_orders'])}.\n\n" \
                          f"–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–≥—Ä–∞–¥: {response['active_rewards']}."
    context.bot.send_message(chat_id=update.effective_chat.id, text=user_rewards_reply, )


def register(update: Update, context: CallbackContext):
    if update.message.contact.user_id == update.message.chat_id:
        url = 'http://localhost:8002/api/users/create/'
        data = {'phone': update.message.contact.phone_number.replace('+', ''),
                'tg_id': update.message.contact.user_id,
                'first_name': update.message.contact.first_name,
                'last_name': update.message.contact.last_name}
        response = requests.post(url, data=data)
        generate_qr(update, update.message.contact)
        if str(response.status_code).startswith('2'):
            reply_text = '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.'
        else:
            reply_text = response.text
    else:
        reply_text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.'
    context.bot.send_message(chat_id=update.effective_chat.id, text=reply_text, reply_markup=get_base_reply_keyboard())


def do_echo(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    text = update.message.text
    update.message.reply_text(
        text=f"{text}"
    )


def generate_qr(update, contact):
    phone_number = contact.phone_number.replace('+', '')
    img = qrcode.make(phone_number)
    img.save(f'temp/qr/{update.message.chat_id}.png')


def display_qr(update, context):
    with open(f'temp/qr/{update.message.chat_id}.png', 'rb') as qr_png:
        context.bot.sendPhoto(chat_id=update.message.chat_id, photo=qr_png,
                              caption='–ü–æ–∫–∞–∂–∏—Ç–µ –≤–∞—à QR-–∫–æ–¥ –∫–∞—Å—Å–∏—Ä—É.')


def main():
    bot = Bot(
        token=TG_TOKEN,
    )
    updater = Updater(TG_TOKEN, use_context=True)
    updater.dispatcher.add_handler(CommandHandler('start', start))
    about_handler = CommandHandler('about', about)
    help_handler = CommandHandler('help', help)
    # echo_handler = MessageHandler(Filters.text & (~Filters.command), echo)
    updater.dispatcher.add_handler(about_handler)
    updater.dispatcher.add_handler(help_handler)
    # updater.dispatcher.add_handler(echo_handler)

    # handler –î–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    establishments_handler = MessageHandler(Filters.regex('–ó–∞–≤–µ–¥–µ–Ω–∏—è'), establishments)
    updater.dispatcher.add_handler(establishments_handler)

    news_handler = MessageHandler(Filters.regex('–ù–æ–≤–æ—Å—Ç–∏'), news)
    updater.dispatcher.add_handler(news_handler)

    awards_handler = MessageHandler(Filters.regex('–ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã'), awards)
    updater.dispatcher.add_handler(awards_handler)

    qr_handler = MessageHandler(Filters.regex('QR –∫–æ–¥'), display_qr)
    updater.dispatcher.add_handler(qr_handler)

    register_handler = MessageHandler(Filters.contact & (~Filters.command), register)
    updater.dispatcher.add_handler(register_handler)

    updater.start_polling()
    updater.idle()


class LoyaltyApi(Consumer):
    @returns.json
    @get("{path}/")
    def get_repos(self, path):
        pass


loyaltyapi = LoyaltyApi(base_url="http://localhost:8002/api/")

if __name__ == '__main__':
    main()
